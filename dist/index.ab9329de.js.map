{"mappings":"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","sources":["<anon>","js/carousel.js"],"sourcesContent":["var $570df71cc35140d7$exports = {};\ngsap.registerPlugin(ScrollTrigger);\nlet $570df71cc35140d7$var$iteration = 0; // gets iterated when we scroll all the way to the end or start and wraps around - allows us to smoothly continue the playhead scrubbing in the correct direction.\nconst $570df71cc35140d7$var$spacing = 0.1, $570df71cc35140d7$var$snap = gsap.utils.snap($570df71cc35140d7$var$spacing), $570df71cc35140d7$var$cards = gsap.utils.toArray(\".cards li\"), $570df71cc35140d7$var$seamlessLoop = $570df71cc35140d7$var$buildSeamlessLoop($570df71cc35140d7$var$cards, $570df71cc35140d7$var$spacing), $570df71cc35140d7$var$scrub = gsap.to($570df71cc35140d7$var$seamlessLoop, {\n    totalTime: 0,\n    duration: 0.5,\n    ease: \"power3\",\n    paused: true\n}), $570df71cc35140d7$var$trigger = ScrollTrigger.create({\n    start: 0,\n    onUpdate (self) {\n        if (self.progress === 1 && self.direction > 0 && !self.wrapping) $570df71cc35140d7$var$wrapForward(self);\n        else if (self.progress < 1e-5 && self.direction < 0 && !self.wrapping) $570df71cc35140d7$var$wrapBackward(self);\n        else {\n            $570df71cc35140d7$var$scrub.vars.totalTime = $570df71cc35140d7$var$snap(($570df71cc35140d7$var$iteration + self.progress) * $570df71cc35140d7$var$seamlessLoop.duration());\n            $570df71cc35140d7$var$scrub.invalidate().restart(); // to improve performance, we just invalidate and restart the same tween. No need for overwrites or creating a new tween on each update.\n            self.wrapping = false;\n        }\n    },\n    end: \"+=3000\",\n    pin: \".gallery\"\n});\nfunction $570df71cc35140d7$var$wrapForward(trigger) {\n    $570df71cc35140d7$var$iteration++;\n    trigger.wrapping = true;\n    trigger.scroll(trigger.start + 1);\n}\nfunction $570df71cc35140d7$var$wrapBackward(trigger) {\n    $570df71cc35140d7$var$iteration--;\n    if ($570df71cc35140d7$var$iteration < 0) {\n        $570df71cc35140d7$var$iteration = 9;\n        $570df71cc35140d7$var$seamlessLoop.totalTime($570df71cc35140d7$var$seamlessLoop.totalTime() + $570df71cc35140d7$var$seamlessLoop.duration() * 10);\n        $570df71cc35140d7$var$scrub.pause(); // otherwise it may update the totalTime right before the trigger updates, making the starting value different than what we just set above. \n    }\n    trigger.wrapping = true;\n    trigger.scroll(trigger.end - 1);\n}\nfunction $570df71cc35140d7$var$scrubTo(totalTime) {\n    let progress = (totalTime - $570df71cc35140d7$var$seamlessLoop.duration() * $570df71cc35140d7$var$iteration) / $570df71cc35140d7$var$seamlessLoop.duration();\n    if (progress > 1) $570df71cc35140d7$var$wrapForward($570df71cc35140d7$var$trigger);\n    else if (progress < 0) $570df71cc35140d7$var$wrapBackward($570df71cc35140d7$var$trigger);\n    else $570df71cc35140d7$var$trigger.scroll($570df71cc35140d7$var$trigger.start + progress * ($570df71cc35140d7$var$trigger.end - $570df71cc35140d7$var$trigger.start));\n}\ndocument.querySelector(\".next\").addEventListener(\"click\", ()=>$570df71cc35140d7$var$scrubTo($570df71cc35140d7$var$scrub.vars.totalTime + $570df71cc35140d7$var$spacing));\ndocument.querySelector(\".prev\").addEventListener(\"click\", ()=>$570df71cc35140d7$var$scrubTo($570df71cc35140d7$var$scrub.vars.totalTime - $570df71cc35140d7$var$spacing));\nfunction $570df71cc35140d7$var$buildSeamlessLoop(items, spacing) {\n    let overlap = Math.ceil(1 / spacing), startTime = items.length * spacing + 0.5, loopTime = (items.length + overlap) * spacing + 1, rawSequence = gsap.timeline({\n        paused: true\n    }), seamlessLoop = gsap.timeline({\n        paused: true,\n        repeat: -1,\n        onRepeat () {\n            this._time === this._dur && (this._tTime += this._dur - 0.01);\n        }\n    }), l = items.length + overlap * 2, time = 0, i, index, item;\n    // set initial state of items\n    gsap.set(items, {\n        xPercent: 400,\n        opacity: 0,\n        scale: 0\n    });\n    // now loop through and create all the animations in a staggered fashion. Remember, we must create EXTRA animations at the end to accommodate the seamless looping.\n    for(i = 0; i < l; i++){\n        index = i % items.length;\n        item = items[index];\n        time = i * spacing;\n        rawSequence.fromTo(item, {\n            scale: 0,\n            opacity: 0\n        }, {\n            scale: 1,\n            opacity: 1,\n            zIndex: 100,\n            duration: 0.5,\n            yoyo: true,\n            repeat: 1,\n            ease: \"power1.in\",\n            immediateRender: false\n        }, time).fromTo(item, {\n            xPercent: 400\n        }, {\n            xPercent: -400,\n            duration: 1,\n            ease: \"none\",\n            immediateRender: false\n        }, time);\n        i <= items.length && seamlessLoop.add(\"label\" + i, time); // we don't really need these, but if you wanted to jump to key spots using labels, here ya go.\n    }\n    // here's where we set up the scrubbing of the playhead to make it appear seamless. \n    rawSequence.time(startTime);\n    seamlessLoop.to(rawSequence, {\n        time: loopTime,\n        duration: loopTime - startTime,\n        ease: \"none\"\n    }).fromTo(rawSequence, {\n        time: overlap * spacing + 1\n    }, {\n        time: startTime,\n        duration: startTime - (overlap * spacing + 1),\n        immediateRender: false,\n        ease: \"none\"\n    });\n    return seamlessLoop;\n}\n\n\n//# sourceMappingURL=index.ab9329de.js.map\n","gsap.registerPlugin(ScrollTrigger);\r\n\r\nlet iteration = 0; // gets iterated when we scroll all the way to the end or start and wraps around - allows us to smoothly continue the playhead scrubbing in the correct direction.\r\n\r\nconst spacing = 0.1,    // spacing of the cards (stagger)\r\n    snap = gsap.utils.snap(spacing), // we'll use this to snap the playhead on the seamlessLoop\r\n    cards = gsap.utils.toArray('.cards li'),\r\n    seamlessLoop = buildSeamlessLoop(cards, spacing),\r\n    scrub = gsap.to(seamlessLoop, { // we reuse this tween to smoothly scrub the playhead on the seamlessLoop\r\n        totalTime: 0,\r\n        duration: 0.5,\r\n        ease: \"power3\",\r\n        paused: true\r\n    }),\r\n    trigger = ScrollTrigger.create({\r\n        start: 0,\r\n        onUpdate(self) {\r\n            if (self.progress === 1 && self.direction > 0 && !self.wrapping) {\r\n                wrapForward(self);\r\n            } else if (self.progress < 1e-5 && self.direction < 0 && !self.wrapping) {\r\n                wrapBackward(self);\r\n            } else {\r\n                scrub.vars.totalTime = snap((iteration + self.progress) * seamlessLoop.duration());\r\n                scrub.invalidate().restart(); // to improve performance, we just invalidate and restart the same tween. No need for overwrites or creating a new tween on each update.\r\n                self.wrapping = false;\r\n            }\r\n        },\r\n        end: \"+=3000\",\r\n        pin: \".gallery\"\r\n    });\r\n\r\nfunction wrapForward(trigger) { // when the ScrollTrigger reaches the end, loop back to the beginning seamlessly\r\n    iteration++;\r\n    trigger.wrapping = true;\r\n    trigger.scroll(trigger.start + 1);\r\n}\r\n\r\nfunction wrapBackward(trigger) { // when the ScrollTrigger reaches the start again (in reverse), loop back to the end seamlessly\r\n    iteration--;\r\n    if (iteration < 0) { // to keep the playhead from stopping at the beginning, we jump ahead 10 iterations\r\n        iteration = 9;\r\n        seamlessLoop.totalTime(seamlessLoop.totalTime() + seamlessLoop.duration() * 10);\r\n        scrub.pause(); // otherwise it may update the totalTime right before the trigger updates, making the starting value different than what we just set above. \r\n    }\r\n    trigger.wrapping = true;\r\n    trigger.scroll(trigger.end - 1);\r\n}\r\n\r\nfunction scrubTo(totalTime) { // moves the scroll position to the place that corresponds to the totalTime value of the seamlessLoop, and wraps if necessary.\r\n    let progress = (totalTime - seamlessLoop.duration() * iteration) / seamlessLoop.duration();\r\n    if (progress > 1) {\r\n        wrapForward(trigger);\r\n    } else if (progress < 0) {\r\n        wrapBackward(trigger);\r\n    } else {\r\n        trigger.scroll(trigger.start + progress * (trigger.end - trigger.start));\r\n    }\r\n}\r\n\r\ndocument.querySelector(\".next\").addEventListener(\"click\", () => scrubTo(scrub.vars.totalTime + spacing));\r\ndocument.querySelector(\".prev\").addEventListener(\"click\", () => scrubTo(scrub.vars.totalTime - spacing));\r\n\r\n\r\n\r\n\r\nfunction buildSeamlessLoop(items, spacing) {\r\n    let overlap = Math.ceil(1 / spacing), // number of EXTRA animations on either side of the start/end to accommodate the seamless looping\r\n        startTime = items.length * spacing + 0.5, // the time on the rawSequence at which we'll start the seamless loop\r\n        loopTime = (items.length + overlap) * spacing + 1, // the spot at the end where we loop back to the startTime \r\n        rawSequence = gsap.timeline({ paused: true }), // this is where all the \"real\" animations live\r\n        seamlessLoop = gsap.timeline({ // this merely scrubs the playhead of the rawSequence so that it appears to seamlessly loop\r\n            paused: true,\r\n            repeat: -1, // to accommodate infinite scrolling/looping\r\n            onRepeat() { // works around a super rare edge case bug that's fixed GSAP 3.6.1\r\n                this._time === this._dur && (this._tTime += this._dur - 0.01);\r\n            }\r\n        }),\r\n        l = items.length + overlap * 2,\r\n        time = 0,\r\n        i, index, item;\r\n\r\n    // set initial state of items\r\n    gsap.set(items, { xPercent: 400, opacity: 0, scale: 0 });\r\n\r\n    // now loop through and create all the animations in a staggered fashion. Remember, we must create EXTRA animations at the end to accommodate the seamless looping.\r\n    for (i = 0; i < l; i++) {\r\n        index = i % items.length;\r\n        item = items[index];\r\n        time = i * spacing;\r\n        rawSequence.fromTo(item, { scale: 0, opacity: 0 }, { scale: 1, opacity: 1, zIndex: 100, duration: 0.5, yoyo: true, repeat: 1, ease: \"power1.in\", immediateRender: false }, time)\r\n            .fromTo(item, { xPercent: 400 }, { xPercent: -400, duration: 1, ease: \"none\", immediateRender: false }, time);\r\n        i <= items.length && seamlessLoop.add(\"label\" + i, time); // we don't really need these, but if you wanted to jump to key spots using labels, here ya go.\r\n    }\r\n\r\n    // here's where we set up the scrubbing of the playhead to make it appear seamless. \r\n    rawSequence.time(startTime);\r\n    seamlessLoop.to(rawSequence, {\r\n        time: loopTime,\r\n        duration: loopTime - startTime,\r\n        ease: \"none\"\r\n    }).fromTo(rawSequence, { time: overlap * spacing + 1 }, {\r\n        time: startTime,\r\n        duration: startTime - (overlap * spacing + 1),\r\n        immediateRender: false,\r\n        ease: \"none\"\r\n    });\r\n    return seamlessLoop;\r\n}\r\n"],"names":["gsap","registerPlugin","ScrollTrigger","$570df71cc35140d7$var$iteration","$570df71cc35140d7$var$snap","utils","snap","$570df71cc35140d7$var$seamlessLoop","$570df71cc35140d7$var$buildSeamlessLoop","items","spacing","overlap","Math","ceil","startTime","length","loopTime","rawSequence","timeline","paused","seamlessLoop","repeat","onRepeat","_time","_dur","_tTime","l","time","i","index","item","set","xPercent","opacity","scale","fromTo","zIndex","duration","yoyo","ease","immediateRender","add","to","toArray","$570df71cc35140d7$var$scrub","totalTime","$570df71cc35140d7$var$trigger","create","start","onUpdate","self","progress","direction","wrapping","$570df71cc35140d7$var$wrapForward","$570df71cc35140d7$var$wrapBackward","vars","invalidate","restart","end","pin","trigger","scroll","pause","$570df71cc35140d7$var$scrubTo","document","querySelector","addEventListener"],"version":3,"file":"index.ab9329de.js.map"}