{"mappings":"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","sources":["<anon>","js/carousel.js"],"sourcesContent":["class Carousel {\n    constructor(el){\n        this.el = el;\n        this.carouselOptions = [\n            \"previous\",\n            \"next\"\n        ];\n        this.carouselData = [\n            {\n                \"id\": \"1\",\n                \"src\": \"http://fakeimg.pl/300/?text=1\"\n            },\n            {\n                \"id\": \"2\",\n                \"src\": \"http://fakeimg.pl/300/?text=2\"\n            },\n            {\n                \"id\": \"3\",\n                \"src\": \"http://fakeimg.pl/300/?text=3\"\n            },\n            {\n                \"id\": \"4\",\n                \"src\": \"http://fakeimg.pl/300/?text=4\"\n            },\n            {\n                \"id\": \"5\",\n                \"src\": \"http://fakeimg.pl/300/?text=5\"\n            }\n        ];\n        this.carouselInView = [\n            1,\n            2,\n            3,\n            4,\n            5\n        ];\n        this.carouselContainer;\n        this.carouselPlayState;\n    }\n    mounted() {\n        this.setupCarousel();\n    }\n    // Build carousel html\n    setupCarousel() {\n        const container = document.createElement(\"div\");\n        const controls = document.createElement(\"div\");\n        // Add container for carousel items and controls\n        this.el.append(container, controls);\n        container.className = \"carousel-custom-container\";\n        controls.className = \"carousel-custom-controls\";\n        // Take dataset array and append items to container\n        this.carouselData.forEach((item, index)=>{\n            const carouselItem = item.src ? document.createElement(\"img\") : document.createElement(\"div\");\n            container.append(carouselItem);\n            // Add item attributes\n            carouselItem.className = `carousel-custom-item carousel-custom-item-${index + 1}`;\n            carouselItem.src = item.src;\n            carouselItem.setAttribute(\"loading\", \"lazy\");\n            // Used to keep track of carousel items, infinite items possible in carousel however min 5 items required\n            carouselItem.setAttribute(\"data-index\", `${index + 1}`);\n        });\n        this.carouselOptions.forEach((option)=>{\n            const btn = document.createElement(\"button\");\n            const axSpan = document.createElement(\"span\");\n            // Add accessibilty spans to button\n            axSpan.innerText = option;\n            axSpan.className = \"ax-hidden\";\n            btn.append(axSpan);\n            // Add button attributes\n            btn.className = `carousel-custom-control carousel-custom-control-${option}`;\n            btn.setAttribute(\"data-name\", option);\n            // Add carousel control options\n            controls.append(btn);\n        });\n        // After rendering carousel to our DOM, setup carousel controls' event listeners\n        this.setControls([\n            ...controls.children\n        ]);\n        // Set container property\n        this.carouselContainer = container;\n    }\n    setControls(controls) {\n        controls.forEach((control)=>{\n            control.onclick = (event)=>{\n                event.preventDefault();\n                // Manage control actions, update our carousel data first then with a callback update our DOM\n                this.controlManager(control.dataset.name);\n            };\n        });\n    }\n    controlManager(control) {\n        if (control === \"previous\") return this.previous();\n        if (control === \"next\") return this.next();\n        return;\n    }\n    previous() {\n        // Update order of items in data array to be shown in carousel\n        this.carouselData.unshift(this.carouselData.pop());\n        // Push the first item to the end of the array so that the previous item is front and center\n        this.carouselInView.push(this.carouselInView.shift());\n        // Update the css class for each carousel item in view\n        this.carouselInView.forEach((item, index)=>{\n            this.carouselContainer.children[index].className = `carousel-custom-item carousel-custom-item-${item}`;\n        });\n        // Using the first 5 items in data array update content of carousel items in view\n        this.carouselData.slice(0, 5).forEach((data, index)=>{\n            document.querySelector(`.carousel-custom-item-${index + 1}`).src = data.src;\n        });\n    }\n    next() {\n        // Update order of items in data array to be shown in carousel\n        this.carouselData.push(this.carouselData.shift());\n        // Take the last item and add it to the beginning of the array so that the next item is front and center\n        this.carouselInView.unshift(this.carouselInView.pop());\n        // Update the css class for each carousel item in view\n        this.carouselInView.forEach((item, index)=>{\n            this.carouselContainer.children[index].className = `carousel-custom-item carousel-custom-item-${item}`;\n        });\n        // Using the first 5 items in data array update content of carousel items in view\n        this.carouselData.slice(0, 5).forEach((data, index)=>{\n            document.querySelector(`.carousel-custom-item-${index + 1}`).src = data.src;\n        });\n    }\n    add() {\n        const newItem = {\n            \"id\": \"\",\n            \"src\": \"\"\n        };\n        const lastItem = this.carouselData.length;\n        const lastIndex = this.carouselData.findIndex((item)=>item.id == lastItem);\n        // Assign properties for new carousel item\n        Object.assign(newItem, {\n            id: `${lastItem + 1}`,\n            src: `http://fakeimg.pl/300/?text=${lastItem + 1}`\n        });\n        // Then add it to the \"last\" item in our carouselData\n        this.carouselData.splice(lastIndex + 1, 0, newItem);\n        // Shift carousel to display new item\n        this.next();\n    }\n    play() {\n        const playBtn = document.querySelector(\".carousel-custom-control-play\");\n        const startPlaying = ()=>this.next();\n        if (playBtn.classList.contains(\"playing\")) {\n            // Remove class to return to play button state/appearance\n            playBtn.classList.remove(\"playing\");\n            // Remove setInterval\n            clearInterval(this.carouselPlayState);\n            this.carouselPlayState = null;\n        } else {\n            // Add class to change to pause button state/appearance\n            playBtn.classList.add(\"playing\");\n            // First run initial next method\n            this.next();\n            // Use play state prop to store interval ID and run next method on a 1.5 second interval\n            this.carouselPlayState = setInterval(startPlaying, 1500);\n        }\n    }\n}\n// Refers to the carousel root element you want to target, use specific class selectors if using multiple carousels\nconst el = document.querySelector(\".carousel-custom\");\n// Create a new carousel object\nconst exampleCarousel = new Carousel(el);\n// Setup carousel and methods\nexampleCarousel.mounted();\n\n//# sourceMappingURL=index.a00d31d8.js.map\n","\r\nclass Carousel {\r\n    constructor(el) {\r\n        this.el = el;\r\n        this.carouselOptions = ['previous', 'next'];\r\n        this.carouselData = [\r\n            {\r\n                'id': '1',\r\n                'src': 'http://fakeimg.pl/300/?text=1',\r\n            },\r\n            {\r\n                'id': '2',\r\n                'src': 'http://fakeimg.pl/300/?text=2',\r\n            },\r\n            {\r\n                'id': '3',\r\n                'src': 'http://fakeimg.pl/300/?text=3',\r\n            },\r\n            {\r\n                'id': '4',\r\n                'src': 'http://fakeimg.pl/300/?text=4',\r\n            },\r\n            {\r\n                'id': '5',\r\n                'src': 'http://fakeimg.pl/300/?text=5',\r\n            }\r\n        ];\r\n        this.carouselInView = [1, 2, 3, 4, 5];\r\n        this.carouselContainer;\r\n        this.carouselPlayState;\r\n    }\r\n\r\n    mounted() {\r\n        this.setupCarousel();\r\n    }\r\n\r\n    // Build carousel html\r\n    setupCarousel() {\r\n        const container = document.createElement('div');\r\n        const controls = document.createElement('div');\r\n\r\n        // Add container for carousel items and controls\r\n        this.el.append(container, controls);\r\n        container.className = 'carousel-custom-container';\r\n        controls.className = 'carousel-custom-controls';\r\n\r\n        // Take dataset array and append items to container\r\n        this.carouselData.forEach((item, index) => {\r\n            const carouselItem = item.src ? document.createElement('img') : document.createElement('div');\r\n\r\n            container.append(carouselItem);\r\n\r\n            // Add item attributes\r\n            carouselItem.className = `carousel-custom-item carousel-custom-item-${index + 1}`;\r\n            carouselItem.src = item.src;\r\n            carouselItem.setAttribute('loading', 'lazy');\r\n            // Used to keep track of carousel items, infinite items possible in carousel however min 5 items required\r\n            carouselItem.setAttribute('data-index', `${index + 1}`);\r\n        });\r\n\r\n        this.carouselOptions.forEach((option) => {\r\n            const btn = document.createElement('button');\r\n            const axSpan = document.createElement('span');\r\n\r\n            // Add accessibilty spans to button\r\n            axSpan.innerText = option;\r\n            axSpan.className = 'ax-hidden';\r\n            btn.append(axSpan);\r\n\r\n            // Add button attributes\r\n            btn.className = `carousel-custom-control carousel-custom-control-${option}`;\r\n            btn.setAttribute('data-name', option);\r\n\r\n            // Add carousel control options\r\n            controls.append(btn);\r\n        });\r\n\r\n        // After rendering carousel to our DOM, setup carousel controls' event listeners\r\n        this.setControls([...controls.children]);\r\n\r\n        // Set container property\r\n        this.carouselContainer = container;\r\n    }\r\n\r\n    setControls(controls) {\r\n        controls.forEach(control => {\r\n            control.onclick = (event) => {\r\n                event.preventDefault();\r\n\r\n                // Manage control actions, update our carousel data first then with a callback update our DOM\r\n                this.controlManager(control.dataset.name);\r\n            };\r\n        });\r\n    }\r\n\r\n    controlManager(control) {\r\n        if (control === 'previous') return this.previous();\r\n        if (control === 'next') return this.next();\r\n        return;\r\n    }\r\n\r\n    previous() {\r\n        // Update order of items in data array to be shown in carousel\r\n        this.carouselData.unshift(this.carouselData.pop());\r\n\r\n        // Push the first item to the end of the array so that the previous item is front and center\r\n        this.carouselInView.push(this.carouselInView.shift());\r\n\r\n        // Update the css class for each carousel item in view\r\n        this.carouselInView.forEach((item, index) => {\r\n            this.carouselContainer.children[index].className = `carousel-custom-item carousel-custom-item-${item}`;\r\n        });\r\n\r\n        // Using the first 5 items in data array update content of carousel items in view\r\n        this.carouselData.slice(0, 5).forEach((data, index) => {\r\n            document.querySelector(`.carousel-custom-item-${index + 1}`).src = data.src;\r\n        });\r\n    }\r\n\r\n    next() {\r\n        // Update order of items in data array to be shown in carousel\r\n        this.carouselData.push(this.carouselData.shift());\r\n\r\n        // Take the last item and add it to the beginning of the array so that the next item is front and center\r\n        this.carouselInView.unshift(this.carouselInView.pop());\r\n\r\n        // Update the css class for each carousel item in view\r\n        this.carouselInView.forEach((item, index) => {\r\n            this.carouselContainer.children[index].className = `carousel-custom-item carousel-custom-item-${item}`;\r\n        });\r\n\r\n        // Using the first 5 items in data array update content of carousel items in view\r\n        this.carouselData.slice(0, 5).forEach((data, index) => {\r\n            document.querySelector(`.carousel-custom-item-${index + 1}`).src = data.src;\r\n        });\r\n    }\r\n\r\n    add() {\r\n        const newItem = {\r\n            'id': '',\r\n            'src': '',\r\n        };\r\n        const lastItem = this.carouselData.length;\r\n        const lastIndex = this.carouselData.findIndex(item => item.id == lastItem);\r\n\r\n        // Assign properties for new carousel item\r\n        Object.assign(newItem, {\r\n            id: `${lastItem + 1}`,\r\n            src: `http://fakeimg.pl/300/?text=${lastItem + 1}`\r\n        });\r\n\r\n        // Then add it to the \"last\" item in our carouselData\r\n        this.carouselData.splice(lastIndex + 1, 0, newItem);\r\n\r\n        // Shift carousel to display new item\r\n        this.next();\r\n    }\r\n\r\n    play() {\r\n        const playBtn = document.querySelector('.carousel-custom-control-play');\r\n        const startPlaying = () => this.next();\r\n\r\n        if (playBtn.classList.contains('playing')) {\r\n            // Remove class to return to play button state/appearance\r\n            playBtn.classList.remove('playing');\r\n\r\n            // Remove setInterval\r\n            clearInterval(this.carouselPlayState);\r\n            this.carouselPlayState = null;\r\n        } else {\r\n            // Add class to change to pause button state/appearance\r\n            playBtn.classList.add('playing');\r\n\r\n            // First run initial next method\r\n            this.next();\r\n\r\n            // Use play state prop to store interval ID and run next method on a 1.5 second interval\r\n            this.carouselPlayState = setInterval(startPlaying, 1500);\r\n        };\r\n    }\r\n\r\n}\r\n\r\n// Refers to the carousel root element you want to target, use specific class selectors if using multiple carousels\r\nconst el = document.querySelector('.carousel-custom');\r\n// Create a new carousel object\r\nconst exampleCarousel = new Carousel(el);\r\n// Setup carousel and methods\r\nexampleCarousel.mounted();\r\n"],"names":["el","document","querySelector","exampleCarousel","constructor","carouselOptions","carouselData","carouselInView","carouselContainer","carouselPlayState","mounted","setupCarousel","container","createElement","controls","append","className","forEach","item","index","carouselItem","src","setAttribute","option","btn","axSpan","innerText","setControls","children","control","onclick","event","preventDefault","controlManager","dataset","name","previous","next","unshift","pop","push","shift","slice","data","add","newItem","lastItem","length","lastIndex","findIndex","id","Object","assign","splice","play","playBtn","classList","contains","remove","clearInterval","setInterval"],"version":3,"file":"index.a00d31d8.js.map"}